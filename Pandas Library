{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4d39cfac",
   "metadata": {
    "papermill": {
     "duration": 0.002679,
     "end_time": "2024-09-01T16:45:37.806930",
     "exception": false,
     "start_time": "2024-09-01T16:45:37.804251",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Basic codes related to pandas library**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08e7729b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-01T16:45:37.813374Z",
     "iopub.status.busy": "2024-09-01T16:45:37.812922Z",
     "iopub.status.idle": "2024-09-01T16:45:42.715114Z",
     "shell.execute_reply": "2024-09-01T16:45:42.713734Z"
    },
    "papermill": {
     "duration": 4.908772,
     "end_time": "2024-09-01T16:45:42.717935",
     "exception": false,
     "start_time": "2024-09-01T16:45:37.809163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3393743415.py:141: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  df.groupby(\"time\").agg({\"total_bill\": [\"sum\", \"min\",\"max\",\"mean\"]})\n",
      "/tmp/ipykernel_17/3393743415.py:147: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  df.groupby([\"day\",\"time\"]).agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"]})\n",
      "/tmp/ipykernel_17/3393743415.py:154: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  cat_sex.groupby(\"day\").agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"],\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">total_bill</th>\n",
       "      <th colspan=\"4\" halign=\"left\">tip</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Thur</th>\n",
       "      <td>516.11</td>\n",
       "      <td>8.35</td>\n",
       "      <td>43.11</td>\n",
       "      <td>16.64871</td>\n",
       "      <td>79.42</td>\n",
       "      <td>1.25</td>\n",
       "      <td>5.17</td>\n",
       "      <td>2.561935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fri</th>\n",
       "      <td>55.76</td>\n",
       "      <td>10.09</td>\n",
       "      <td>16.27</td>\n",
       "      <td>13.94000</td>\n",
       "      <td>10.98</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.48</td>\n",
       "      <td>2.745000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sat</th>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sun</th>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill                            tip                      \n",
       "            sum    min    max      mean    sum   min   max      mean\n",
       "day                                                                 \n",
       "Thur     516.11   8.35  43.11  16.64871  79.42  1.25  5.17  2.561935\n",
       "Fri       55.76  10.09  16.27  13.94000  10.98  2.00  3.48  2.745000\n",
       "Sat        0.00    NaN    NaN       NaN   0.00   NaN   NaN       NaN\n",
       "Sun        0.00    NaN    NaN       NaN   0.00   NaN   NaN       NaN"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### ##################################################\n",
    "# Pandas Alıştırmalar\n",
    "##################################################\n",
    "\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "from sympy import false\n",
    "from unicodedata import category\n",
    "\n",
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', 1000)\n",
    "\n",
    "#########################################\n",
    "# Görev 1: Seaborn kütüphanesi içerisinden Titanic veri setini tanımlayınız.\n",
    "#########################################\n",
    "df = sns.load_dataset(\"titanic\")\n",
    "df.head()\n",
    "\n",
    "#########################################\n",
    "# Görev 2: Yukarıda tanımlanan Titanic veri setindeki kadın ve erkek yolcuların sayısını bulunuz.\n",
    "#########################################\n",
    "df[\"sex\"].value_counts()\n",
    "\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 3: Her bir sutuna ait unique değerlerin sayısını bulunuz.\n",
    "#########################################\n",
    "df.nunique()\n",
    "#for col in df.columns:\n",
    "    #print(\"Column:\"+str(col)+\"-\"+ str(df[col].nunique()))\n",
    "\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 4: pclass değişkeninin unique değerleri bulunuz.\n",
    "#########################################\n",
    "\n",
    "df[\"pclass\"].unique()\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 5:  pclass ve parch değişkenlerinin unique değerlerinin sayısını bulunuz.\n",
    "#########################################\n",
    "#for col in df.columns:\n",
    "    #if col in [\"pclass\",\"parch\"]:\n",
    "        #print(df[col].nunique())\n",
    "df[[\"pclass\",\"parch\"]].nunique()\n",
    "\n",
    "#########################################\n",
    "# Görev 6: embarked değişkeninin tipini kontrol ediniz. Tipini category olarak değiştiriniz. Tekrar tipini kontrol ediniz.\n",
    "#########################################\n",
    "\n",
    "df[\"embarked\"].dtypes\n",
    "df[\"embarked\"] = df[\"embarked\"].astype('category')\n",
    "df[\"embarked\"].dtypes\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 7: embarked değeri C olanların tüm bilgelerini gösteriniz.\n",
    "#########################################\n",
    "cat_c=df[df['embarked'] == \"C\"]\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 8: embarked değeri S olmayanların tüm bilgelerini gösteriniz.\n",
    "#########################################\n",
    "\n",
    "cat_not_s=df[df['embarked']!='S']\n",
    "\n",
    "#########################################\n",
    "# Görev 9: Yaşı 30 dan küçük ve kadın olan yolcuların tüm bilgilerini gösteriniz.\n",
    "#########################################\n",
    "\n",
    "cat_sex_age=df[(df[\"sex\"]==\"female\") &(df[\"age\"]<=30)]\n",
    "\n",
    "#########################################\n",
    "# Görev 10: Fare'i 500'den büyük veya yaşı 70 den büyük yolcuların bilgilerini gösteriniz.\n",
    "#########################################\n",
    "\n",
    "cat_fare=df[(df[\"fare\"]>500) | (df[\"age\"]>70)]\n",
    "\n",
    "#########################################\n",
    "# Görev 11: Her bir değişkendeki boş değerlerin toplamını bulunuz.\n",
    "#########################################\n",
    "df.isnull().sum()\n",
    "\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 12: who değişkenini dataframe'den düşürün.\n",
    "#########################################\n",
    "df.drop('who', axis=1).head()\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 13: deck değikenindeki boş değerleri deck değişkenin en çok tekrar eden değeri (mode) ile doldurunuz.\n",
    "#########################################\n",
    "\n",
    "df['deck'] = df['deck'].fillna(df['deck'].mode()[0])\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 14: age değikenindeki boş değerleri age değişkenin medyanı ile doldurun.\n",
    "#########################################\n",
    "df['age'] = df['age'].fillna(df['age'].median())\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 15: survived değişkeninin Pclass ve Cinsiyet değişkenleri kırılımınında sum, count, mean değerlerini bulunuz.\n",
    "#########################################\n",
    "\n",
    "df.groupby([\"pclass\", \"sex\"]).agg({\"survived\": [\"mean\", \"sum\",\"count\"]})\n",
    "\n",
    "#########################################\n",
    "# Görev 16:  30 yaşın altında olanlar 1, 30'a eşit ve üstünde olanlara 0 vericek bir fonksiyon yazınız.\n",
    "# Yazdığınız fonksiyonu kullanarak titanik veri setinde age_flag adında bir değişken oluşturunuz oluşturunuz. (apply ve lambda yapılarını kullanınız)\n",
    "#########################################\n",
    "def def_age(age):\n",
    "    if age<=30:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "\n",
    "df[\"age_flag\"]=df[\"age\"].apply(lambda x: def_age(x))\n",
    "\n",
    "#########################################\n",
    "# Görev 17: Seaborn kütüphanesi içerisinden Tips veri setini tanımlayınız.\n",
    "#########################################\n",
    "df=sns.load_dataset(\"tips\")\n",
    "df.head()\n",
    "\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 18: Time değişkeninin kategorilerine (Dinner, Lunch) göre total_bill  değerlerinin toplamını, min, max ve ortalamasını bulunuz.\n",
    "#########################################\n",
    "df.groupby(\"time\").agg({\"total_bill\": [\"sum\", \"min\",\"max\",\"mean\"]})\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 19: Günlere ve time göre total_bill değerlerinin toplamını, min, max ve ortalamasını bulunuz.\n",
    "#########################################\n",
    "df.groupby([\"day\",\"time\"]).agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"]})\n",
    "df.head()\n",
    "\n",
    "#########################################\n",
    "# Görev 20:Lunch zamanına ve kadın müşterilere ait total_bill ve tip  değerlerinin day'e göre toplamını, min, max ve ortalamasını bulunuz.\n",
    "#########################################\n",
    "cat_sex=df[(df[\"time\"]==\"Lunch\") &(df[\"sex\"]==\"Female\")]\n",
    "cat_sex.groupby(\"day\").agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"],\n",
    "                            \"tip\":[\"sum\",\"min\",\"max\",\"mean\"]})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ec16ec5",
   "metadata": {
    "_cell_guid": "de0e0544-d0ec-49cc-83bd-d74c3cd9ab89",
    "_uuid": "f9230468-8dee-4907-83b3-ec3fcf4a95fb",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-09-01T16:45:42.724684Z",
     "iopub.status.busy": "2024-09-01T16:45:42.724121Z",
     "iopub.status.idle": "2024-09-01T16:45:42.735932Z",
     "shell.execute_reply": "2024-09-01T16:45:42.734839Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.017975,
     "end_time": "2024-09-01T16:45:42.738325",
     "exception": false,
     "start_time": "2024-09-01T16:45:42.720350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17.184965034965035\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#########################################\n",
    "# Görev 21: size'i 3'ten küçük, total_bill'i 10'dan büyük olan siparişlerin ortalaması nedir?\n",
    "#########################################\n",
    "\n",
    "df.loc[(df[\"size\"]<3)&(df[\"total_bill\"]>10),\"total_bill\"].mean()\n",
    "\n",
    "print(df.loc[(df[\"size\"]<3)&(df[\"total_bill\"]>10),\"total_bill\"].mean())\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 22: total_bill_tip_sum adında yeni bir değişken oluşturun. Her bir müşterinin ödediği totalbill ve tip in toplamını versin.\n",
    "#########################################\n",
    "df[\"total_bill_tip_sum\"]=df[\"total_bill\"]+df[\"tip\"]\n",
    "\n",
    "\n",
    "#########################################\n",
    "# Görev 23: total_bill_tip_sum değişkenine göre büyükten küçüğe sıralayınız ve ilk 30 kişiyi yeni bir dataframe'e atayınız.\n",
    "#########################################\n",
    "\n",
    "#q_df = df.sort_values(by=['total_bill_tip_sum'], ascending=False).head(30)\n",
    "q_df = df.sort_values(by=['total_bill_tip_sum'], ascending=False)[:30]"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.405669,
   "end_time": "2024-09-01T16:45:43.461889",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-01T16:45:35.056220",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
