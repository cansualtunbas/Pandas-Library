{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# **Basic codes related to pandas library**","metadata":{}},{"cell_type":"code","source":"\n\n##################################################\n# Pandas Alıştırmalar\n##################################################\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom sympy import false\nfrom unicodedata import category\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 1000)\n\n#########################################\n# Görev 1: Seaborn kütüphanesi içerisinden Titanic veri setini tanımlayınız.\n#########################################\ndf = sns.load_dataset(\"titanic\")\ndf.head()\n\n#########################################\n# Görev 2: Yukarıda tanımlanan Titanic veri setindeki kadın ve erkek yolcuların sayısını bulunuz.\n#########################################\ndf[\"sex\"].value_counts()\n\n\n\n#########################################\n# Görev 3: Her bir sutuna ait unique değerlerin sayısını bulunuz.\n#########################################\nfor col in df.columns:\n    print(\"Column:\"+str(col)+\"-\"+ str(df[col].nunique()))\n\n\n\n#########################################\n# Görev 4: pclass değişkeninin unique değerleri bulunuz.\n#########################################\n\ndf[\"pclass\"].unique()\n\n\n#########################################\n# Görev 5:  pclass ve parch değişkenlerinin unique değerlerinin sayısını bulunuz.\n#########################################\nfor col in df.columns:\n    if col in [\"pclass\",\"parch\"]:\n        print(df[col].nunique())\n\n\n#########################################\n# Görev 6: embarked değişkeninin tipini kontrol ediniz. Tipini category olarak değiştiriniz. Tekrar tipini kontrol ediniz.\n#########################################\n\ndf[\"embarked\"].dtypes\ndf[\"embarked\"] = df[\"embarked\"].astype('category')\ndf[\"embarked\"].dtypes\n\n\n#########################################\n# Görev 7: embarked değeri C olanların tüm bilgelerini gösteriniz.\n#########################################\ncat_c=df[df['embarked'] == \"C\"]\n\n\n#########################################\n# Görev 8: embarked değeri S olmayanların tüm bilgelerini gösteriniz.\n#########################################\n\ncat_not_s=df[df['embarked']!='S']\n\n#########################################\n# Görev 9: Yaşı 30 dan küçük ve kadın olan yolcuların tüm bilgilerini gösteriniz.\n#########################################\n\ncat_sex_age=df[(df[\"sex\"]==\"female\") &(df[\"age\"]<=30)]\n\n#########################################\n# Görev 10: Fare'i 500'den büyük veya yaşı 70 den büyük yolcuların bilgilerini gösteriniz.\n#########################################\n\ncat_fare=df[(df[\"fare\"]>500) | (df[\"age\"]>70)]\n\n#########################################\n# Görev 11: Her bir değişkendeki boş değerlerin toplamını bulunuz.\n#########################################\ndf.isnull().sum()\n\n\n\n#########################################\n# Görev 12: who değişkenini dataframe'den düşürün.\n#########################################\ndf.drop('who', axis=1).head()\n\n\n#########################################\n# Görev 13: deck değikenindeki boş değerleri deck değişkenin en çok tekrar eden değeri (mode) ile doldurunuz.\n#########################################\n\ndf['deck'] = df['deck'].fillna(df['deck'].mode()[0])\n\n\n#########################################\n# Görev 14: age değikenindeki boş değerleri age değişkenin medyanı ile doldurun.\n#########################################\ndf['age'] = df['age'].fillna(df['age'].median())\n\n\n#########################################\n# Görev 15: survived değişkeninin Pclass ve Cinsiyet değişkenleri kırılımınında sum, count, mean değerlerini bulunuz.\n#########################################\n\ndf.groupby([\"pclass\", \"sex\"]).agg({\"survived\": [\"mean\", \"sum\",\"count\"]})\n\n#########################################\n# Görev 16:  30 yaşın altında olanlar 1, 30'a eşit ve üstünde olanlara 0 vericek bir fonksiyon yazınız.\n# Yazdığınız fonksiyonu kullanarak titanik veri setinde age_flag adında bir değişken oluşturunuz oluşturunuz. (apply ve lambda yapılarını kullanınız)\n#########################################\ndef def_age(age):\n    if age<=30:\n        return 1\n    else:\n        return 0\n\n\ndf[\"age_flag\"]=df[\"age\"].apply(lambda x: def_age(x))\n\n#########################################\n# Görev 17: Seaborn kütüphanesi içerisinden Tips veri setini tanımlayınız.\n#########################################\ndf=sns.load_dataset(\"tips\")\ndf.head()\n\n\n\n#########################################\n# Görev 18: Time değişkeninin kategorilerine (Dinner, Lunch) göre total_bill  değerlerinin toplamını, min, max ve ortalamasını bulunuz.\n#########################################\ndf.groupby(\"time\").agg({\"total_bill\": [\"sum\", \"min\",\"max\",\"mean\"]})\n\n\n#########################################\n# Görev 19: Günlere ve time göre total_bill değerlerinin toplamını, min, max ve ortalamasını bulunuz.\n#########################################\ndf.groupby([\"day\",\"time\"]).agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"]})\ndf.head()\n\n#########################################\n# Görev 20:Lunch zamanına ve kadın müşterilere ait total_bill ve tip  değerlerinin day'e göre toplamını, min, max ve ortalamasını bulunuz.\n#########################################\ncat_sex=df[(df[\"time\"]==\"Lunch\") &(df[\"sex\"]==\"Female\")]\ncat_sex.groupby(\"day\").agg({\"total_bill\":[\"sum\",\"min\",\"max\",\"mean\"],\n                            \"tip\":[\"sum\",\"min\",\"max\",\"mean\"]})\n\n\n#########################################\n# Görev 21: size'i 3'ten küçük, total_bill'i 10'dan büyük olan siparişlerin ortalaması nedir?\n#########################################\n\ncat_size=df[(df[\"size\"]<3)&(df[\"total_bill\"]>10)]\ncat_size.info()\n#kategorik olmayanların ortalamasını aldım\ncat_cols = [col for col in df.columns if str(df[col].dtypes) in [\"int64\", \"float64\"]]\ndf.loc[:, cat_cols].apply(lambda x: x.mean()).head()\n\n#########################################\n# Görev 22: total_bill_tip_sum adında yeni bir değişken oluşturun. Her bir müşterinin ödediği totalbill ve tip in toplamını versin.\n#########################################\ndf[\"total_bill_tip_sum\"]=df[\"total_bill\"]+df[\"tip\"]\n\n\n#########################################\n# Görev 23: total_bill_tip_sum değişkenine göre büyükten küçüğe sıralayınız ve ilk 30 kişiyi yeni bir dataframe'e atayınız.\n#########################################\n\nq_df = df.sort_values(by=['total_bill_tip_sum'], ascending=False).head(30)","metadata":{"_uuid":"f9230468-8dee-4907-83b3-ec3fcf4a95fb","_cell_guid":"de0e0544-d0ec-49cc-83bd-d74c3cd9ab89","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}